import os


class ScrapeDriver:
    def __init__(self):
        self.drivepath = '/Volumes/MoledinaLab-CC1032-MEDINT/Biobank 27890/Pathology Report PDF/'
        self.homepath = '/Users/anshulgowda/Documents/CODE/KUH2022/'
        self.pdfs = []
        self.sectionmarkers = [['clinical information provided :', 'specimen (s) received :'], ['final diagnosis kidney , biopsy :', 'note :'], ['light microscopy :', 'immunofluorescence microscopy :'], ['immunofluorescence microscopy :', 'electron microscopy :'], [
            'electron microscopy :', 'printed by :'], ['surgical pathology report', 'pathologist :'], ['pathologist :', 'electron micrograph'], ['1 .', '2 .'], ['2 .', '3 .'], ['3 .', 'frozen /intraoperative diagnosis : ()']]
        self.i = 0
        self.j = 0

    def CreatePatch(self):
        try:
            os.chdir(self.drivepath)
            print('working directory changed to:\t{}'.format(os.getcwd()))
            return True
        except OSError:
            print('unable to connect to share drive ({})\ncurrent working directory: {}'.format(
                self.drivepath, os.getcwd()))
            return False

    def DestroyPath(self):
        try:
            os.chdir(self.homepath)
            print('working directory changed to:\t{}'.format(os.getcwd()))
            return True
        except OSError:
            print('unable to connect to return to home directory ({})\ncurrent working directory: {}'.format(
                self.drivepath, os.getcwd()))
            return False

    def PullFiles(self):
        if(self.CreatePatch()):  # create patch to share drive
            pdflist = os.listdir(os.getcwd())
            # return list of full paths
            self.pdfs = [self.homepath + filename for filename in pdflist]
            return True

        else:
            return False

    def AnalyzePdfs(self):
        pass  # calling Scrape on the individual pdfs

    def tiff_to_textboxfiles(self, pageinfodict, img, numpages):
        n_boxes = len(pageinfodict['text'])
        for k in range(n_boxes):
            if int(float(pageinfodict['conf'][k])) > 60:
                (x, y, w, h) = (pageinfodict['left'][k], pageinfodict['top']
                                [k], pageinfodict['width'][k], pageinfodict['height'][k])
                img = cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)

        isWritten = cv2.imwrite(
            'TEXTBOX_tiffs/Doc{}/TextBoxDoc{}Page{}.tiff'.format(str(self.i), str(self.i), str(self.j)), img)

    def Scrape(self, filename, i):
        if(self.DestroyPath):
            # open specified file, presumably generated by PullFiles
            images = convert_from_path(filename)

            try:
                os.mkdir('TIFFS')
                os.mkdir('TEXTBOX_tiffs')
            except:
                pass

            for j in range(len(images)):  # iterate through images and save them locally in KUH2022 as .tiffs
                images[j].save('TIFFS/Doc{}/Doc{}page{}.tiff'.format(str(i),
                                                                     str(i), str(j)), 'TIFF', quality=100)

            for j in range(len(images)):  # 2nd iteration to begin the scraping
                self.j = j
                if j == 0:
                    userin = ''

                # "i" will be passed in, i will be generated in main
                img = cv2.imread(
                    'TIFFS/Doc{}/Doc{}page{}.tiff'.format(str(self.i), str(self.i), str(self.j)))
                # produce pytesseract ML text dictionary
                textdict = pytesseract.image_to_data(img, output_type=Output.DICT)

                self.tiff_to_textboxfiles(textdict, img, len(images))


def main():
    Drive = DrivePatch()

    sectionmarkers_new = [['clinical information provided :', 'specimen (s) received :'], ['1 :', '2 :'], ['2 :', '3 :'], ['3 :', 'final diagnosis'], ['kidney , biopsy :', 'note :'], ['note :', 'light microscopy :'], ['light microscopy :', 'immunofluorescence microscopy :'], ['immunofluorescence microscopy :', 'electron microscopy :'], [
        'electron microscopy :', 'surgical pathology report'], ['surgical pathology report', 'pathologist :'], ['pathologist :', 'gross description :'], ['1 .', '2 .'], ['2 .', '3 .'], ['3 .', 'frozen /intraoperative diagnosis : ()'], ['frozen /intraoperative diagnosis : ()', '-999999999']]

    homepath = '/Users/anshulgowda/Documents/CODE/KUH2022/'
    print('working directory: {}'.format(os.getcwd()))
    # os.chdir('/Volumes/MoledinaLab-CC1032-MEDINT/Biobank 27890/Pathology Report PDF/')
    os.chdir('/Users/anshulgowda/Documents/CODE/KUH2022/')
    print('working directory: {}'.format(os.getcwd()))

    pdflist = os.listdir(os.getcwd())
    for j in [homepath + i for i in pdflist]:
        print('\n\n{}\n\n'.format(j))

    # for filename in os.listdir(os.getcwd()):
    # call the read pdf funcs in "jpegtotext.py" prolly need to rename the file to
    # "biopsyscraper.py"


main()
